version: '3.8'
services:
    user_interaction:
        image: stefanalexh99/project_final_user_interaction:latest
        depends_on:
            - auth
            - zoom_component
            - broker
        ports:
            - "8050:8050"
        deploy:
            replicas: 2
            placement:
                max_replicas_per_node: 2
            restart_policy:
                condition: on-failure
        networks:
            - auth_network
            - zoom_network
            - rabbitmq_network

    auth:
        image: stefanalexh99/project_final_auth:latest
        depends_on:
            - database_manager
        ports:
            - "8040:8040"
        environment:
            JWT_SECRET: /run/secrets/jwt_secret
        secrets:
            - jwt_secret
        deploy:
            replicas: 2
            placement:
                max_replicas_per_node: 2
            restart_policy:
                condition: on-failure
        networks:
            - auth_network
            - db_manager_network

    zoom_component:
        image: stefanalexh99/project_final_zoom_component:latest
        depends_on:
            - database_manager
        ports:
            - "8020:8020"
        environment:
            API_KEY: /run/secrets/zoom_key
            API_SECRET: /run/secrets/zoom_secret
        secrets:
            - zoom_secret
            - zoom_key
        deploy:
            replicas: 2
            placement:
                max_replicas_per_node: 2
            restart_policy:
                condition: on-failure
        networks:
            - zoom_network
            - db_manager_network
            - rabbitmq_network

    broker:
        image: rabbitmq:3.9-management
        restart: always
        ports:
            - 5672:5672
            - 15672:15672
        volumes:
            - broker_data:/var/lib/rabbitmq/
            - broker_logs:/var/log/rabbitmq
        deploy:
            replicas: 2
            placement:
                max_replicas_per_node: 2
            restart_policy:
                condition: on-failure
        networks:
            - rabbitmq_network

    database_manager:
        image: stefanalexh99/project_final_database_manager:latest
        depends_on:
            - mysql
        deploy:
            replicas: 2
            placement:
                max_replicas_per_node: 2
            restart_policy:
                condition: on-failure
        environment:
            MYSQL_DATABASE: 'medical'
            MYSQL_USER_FILE: /run/secrets/db_user_secret
            MYSQL_PASSWORD_FILE: /run/secrets/db_password_secret
            MYSQL_HOSTNAME: 'mysql'
            MYSQL_PORT: 3306
        secrets:
            - db_user_secret
            - db_password_secret
        ports:
            - "8010:8010"
        networks:
            - db_manager_network

    mysql:
        image: mysql:5.7
        restart: always
        volumes:
            - ./init.sql:/docker-entrypoint-initdb.d/schema.sql
            - mysqldata:/var/lib/mysql
        environment:
            MYSQL_DATABASE: 'medical'
            MYSQL_USER_FILE: /run/secrets/db_user_secret
            MYSQL_PASSWORD_FILE: /run/secrets/db_password_secret
            MYSQL_ROOT_PASSWORD_FILE: /run/secrets/db_root_secret
        secrets:
            - db_user_secret
            - db_password_secret
            - db_root_secret
        ports:
            - "3306:3306"
        deploy:
            placement:
                constraints:
                    - "node.role==manager"
            restart_policy:
                    condition: on-failure
        networks:
            - db_utility_network
            - db_manager_network

    adminer:
        depends_on:
            - mysql
        image: adminer
        restart: always
        ports:
            - "8080:8080"
        environment:
            ADMINER_DEFAULT_SERVER: mysql
        deploy:
            placement:
                constraints:
                    - "node.role==manager"
            restart_policy:
                condition: on-failure
        networks:
            - db_utility_network

    agent:
        image: portainer/agent
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
            - /var/lib/docker/volumes:/var/lib/docker/volumes
        networks:
            - agent_network
        deploy:
            mode: global
            placement:
                constraints: [node.platform.os == linux]
            restart_policy:
                condition: on-failure

    portainer:
        image: portainer/portainer-ce
        command: -H tcp://tasks.agent:9001 --tlsskipverify
        ports:
            - "9000:9000"
            - "8002:8000"
        volumes:
            - portainer_data:/data
        networks:
            - agent_network
        deploy:
            mode: replicated
            replicas: 1
            placement:
                constraints: [node.role == manager]
            restart_policy:
                condition: on-failure


networks:
    db_utility_network:
    db_manager_network:
    auth_network:
    zoom_network:
    rabbitmq_network:
    agent_network:
        driver: overlay
        attachable: true


volumes:
    mysqldata: {}
    broker_data: {}
    broker_logs: {}
    portainer_data:

secrets:
    db_user_secret:
        file: ./secrets/db_user.txt
    db_password_secret:
        file: ./secrets/db_password.txt
    db_root_secret:
        file: ./secrets/db_root.txt
    jwt_secret:
        file: ./secrets/jwt.txt
    zoom_key:
        file: ./secrets/zoom_key.txt
    zoom_secret:
        file: ./secrets/zoom_secret.txt
